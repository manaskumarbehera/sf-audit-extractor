{
  "order": [
    "SELECT",
    "FROM",
    "WHERE",
    "GROUP BY",
    "HAVING",
    "ORDER BY",
    "LIMIT",
    "OFFSET",
    "FLAGS"
  ],
  "tips": {
    "SELECT": [
      "Return fields, relationship fields (Account.Name), subqueries, or aggregates.",
      "Mixing aggregates with fields? Add GROUP BY for those fields.",
      "FIELDS(ALL|STANDARD|CUSTOM) is handy but explicit lists are faster.",
      "Child subqueries: always add LIMIT (and optionally ORDER BY) for stability.",
      "Use TYPEOF on polymorphic fields (What/Who/Owner) when you need type-specific fields."
    ],
    "FROM": [
      "One base sObject (e.g., Account). Enable Tooling for Tooling objects.",
      "Use dot-walking in SELECT for parent fields; subqueries for children."
    ],
    "WHERE": [
      "Wrap strings/picklists in single quotes (StageName = 'Closed Won').",
      "Use date literals (LAST_N_DAYS:30, THIS_MONTH) for quick filters.",
      "LIKE uses % and _ wildcards with single quotes (Name LIKE 'Acme%'). Escape literal % or _ with \\% or \\_.",
      "Use IN (...) for multiple values; INCLUDES/EXCLUDES for multipicklist.",
      "Use IS NULL / IS NOT NULL for missing values.",
      "Date vs DateTime: Date fields work with TODAY/LAST_N_DAYS, DateTime expects full timestamps (e.g., 2025-10-01T00:00:00Z).",
      "Prefer indexed fields and avoid leading-wildcard LIKE ('%text%').",
      "Semi/anti joins: filter parents via subselects (Id IN (SELECT ...) or Id NOT IN (SELECT ...))."
    ],
    "GROUP BY": [
      "Required when you combine aggregates and non-aggregated fields.",
      "Basic form: GROUP BY Field1, Field2."
    ],
    "HAVING": [
      "Filters aggregated rows; only valid with GROUP BY.",
      "Example: HAVING COUNT(Id) > 5"
    ],
    "ORDER BY": [
      "ORDER BY Field ASC|DESC with optional NULLS FIRST or NULLS LAST.",
      "Example: ORDER BY CreatedDate DESC NULLS LAST",
      "Pair ORDER BY with LIMIT to keep queries responsive."
    ],
    "LIMIT": [
      "Add LIMIT to keep queries responsive (e.g., LIMIT 200)."
    ],
    "OFFSET": [
      "Use for paging; must be <= 2000."
    ],
    "FLAGS": [
      "ALL ROWS includes Recycle Bin and archived activities.",
      "USING SCOPE Mine limits to your records (supported on select objects).",
      "FOR VIEW/FOR REFERENCE affects sharing/recent tracking semantics.",
      "FOR UPDATE locks returned rows until the transaction ends (row locking).",
      "WITH SECURITY_ENFORCED (Apex) applies FLS and sharing."
    ],
    "RELATIONSHIPS": [
      "Child rows: use a subquery with LIMIT and optional ORDER BY.",
      "Semi/Anti join: parent WHERE Id IN/NOT IN (SELECT ParentId FROM Child WHERE ...)."
    ],
    "POLYMORPHIC": [
      "Use TYPEOF on What/Who/Owner to select fields by actual sObject type."
    ]
  },
  "validators": [
    {
      "id": "requireSelectFrom",
      "level": "error",
      "when": "always",
      "test": { "pattern": "^\\s*select\\b[\\s\\S]*\\bfrom\\b", "flags": "i", "negate": true },
      "message": "A SOQL query needs SELECT ... FROM ... at minimum."
    },
    {
      "id": "noTrailingCommaBeforeFrom",
      "level": "error",
      "when": "onRun",
      "test": { "pattern": ",\\s*\\bfrom\\b", "flags": "i" },
      "message": "There's a trailing comma before FROM.",
      "fix": { "pattern": ",\\s*(\\bfrom\\b)", "with": " $1" }
    },
    {
      "id": "havingRequiresGroupBy",
      "level": "error",
      "when": "onRun",
      "test": { "pattern": "\\bhaving\\b(?![\\s\\S]*\\bgroup\\s+by\\b)", "flags": "i" },
      "message": "HAVING requires GROUP BY."
    },
    {
      "id": "aggregateMissingGroupBy",
      "level": "error",
      "when": "onRun",
      "test": { "pattern": "\\b(count|sum|avg|min|max)\\s*\\(", "flags": "i" },
      "and": { "pattern": "\\bselect\\b[\\s\\S]*?,[\\s\\S]*\\b(count|sum|avg|min|max)\\s*\\(", "flags": "i" },
      "andNot": { "pattern": "\\bgroup\\s+by\\b", "flags": "i" },
      "message": "Aggregates mixed with non-aggregated fields require GROUP BY."
    },
    {
      "id": "suggestLimit",
      "level": "hint",
      "when": "onEdit",
      "test": { "pattern": "\\blimit\\b", "flags": "i", "negate": true },
      "message": "Add LIMIT for responsiveness (e.g., LIMIT 200).",
      "fix": { "append": " LIMIT 200" }
    },
    {
      "id": "orderByWithoutLimit",
      "level": "warn",
      "when": "onRun",
      "test": { "pattern": "\\border\\s+by\\b", "flags": "i" },
      "andNot": { "pattern": "\\blimit\\s+\\d+", "flags": "i" },
      "message": "ORDER BY without LIMIT may be expensive; consider adding LIMIT."
    },
    {
      "id": "leadingWildcardLike",
      "level": "warn",
      "when": "onEdit",
      "test": { "pattern": "like\\s*'%[^']+'", "flags": "i" },
      "message": "Leading wildcard LIKE ('%text%') is non-selective; prefer 'text%'."
    },
    {
      "id": "childSubqueryNeedsLimit",
      "level": "warn",
      "when": "onRun",
      "test": { "pattern": "\\(\\s*select\\b[\\s\\S]*?from\\b[\\s\\S]*?\\)", "flags": "i" },
      "andNot": { "pattern": "\\(\\s*select\\b[\\s\\S]*?\\blimit\\s+\\d+[\\s\\S]*?\\)", "flags": "i" },
      "message": "Child subquery should include a LIMIT.",
      "fix": { "hint": "Insert ' LIMIT 5' before the closing parenthesis of the child subquery." }
    },
    {
      "id": "fieldsAllCaution",
      "level": "hint",
      "when": "onEdit",
      "test": { "pattern": "\\bfields\\s*\\((all|standard|custom)\\)", "flags": "i" },
      "message": "FIELDS(...) is convenient; explicit field lists are faster and safer."
    },
    {
      "id": "offsetMax",
      "level": "error",
      "when": "onRun",
      "test": { "pattern": "\\boffset\\s+(\\d+)", "flags": "i" },
      "evaluate": "Number($1) <= 2000",
      "message": "OFFSET must be <= 2000."
    },
    {
      "id": "securityEnforcedSuggestion",
      "level": "info",
      "when": "onRun",
      "test": { "pattern": "\\bWITH\\s+SECURITY_ENFORCED\\b", "flags": "i", "negate": true },
      "message": "Consider WITH SECURITY_ENFORCED in Apex for FLS/sharing."
    },
    {
      "id": "apexSecurityInfo",
      "level": "hint",
      "when": "onEdit",
      "test": { "pattern": "\\bselect\\b", "flags": "i" },
      "andNot": { "pattern": "\\bwith\\s+security_enforced\\b", "flags": "i" },
      "message": "If this SOQL runs in Apex, consider WITH SECURITY_ENFORCED to honor FLS and sharing."
    }
  ],
  "decisionTree": {
    "root": "needTotals",
    "nodes": {
      "needTotals": {
        "text": "Do you need totals or grouped results?",
        "options": [
          { "label": "Yes", "next": "useAggregates" },
          { "label": "No", "next": "needParentFields" }
        ]
      },
      "useAggregates": {
        "text": "Use COUNT/SUM/AVG/MIN/MAX in SELECT. Will you include non-aggregated fields?",
        "options": [
          { "label": "Yes, mix fields", "tips": ["Add GROUP BY for non-aggregated fields.", "Use HAVING for aggregate filters."], "next": "sortLimit" },
          { "label": "No, aggregates only", "tips": ["No GROUP BY needed unless grouping."], "next": "sortLimit" }
        ]
      },
      "needParentFields": {
        "text": "Do you need fields from a parent (lookup/master)?",
        "options": [
          { "label": "Yes", "tips": ["Use dot-walking like Account.Name in SELECT."], "next": "polymorphic" },
          { "label": "No", "next": "polymorphic" }
        ]
      },
      "polymorphic": {
        "text": "Are you using polymorphic fields (What, Who, Owner)?",
        "options": [
          { "label": "Yes", "tips": ["Use TYPEOF to return fields based on target type.", "Example: TYPEOF What WHEN Account THEN Phone, Website WHEN Opportunity THEN Amount END"], "next": "filterByRelated" },
          { "label": "No/Skip", "next": "filterByRelated" }
        ]
      },
      "filterByRelated": {
        "text": "Filter parents based on related children?",
        "options": [
          { "label": "Yes (semi-join)", "tips": ["Id IN (SELECT ParentId FROM Child__c WHERE ...)."], "next": "needChildRows" },
          { "label": "Exclude parents with children (anti-join)", "tips": ["Id NOT IN (SELECT ParentId FROM Child__c WHERE ...)."], "next": "needChildRows" },
          { "label": "No", "next": "needChildRows" }
        ]
      },
      "needChildRows": {
        "text": "Do you need related child rows?",
        "options": [
          { "label": "Yes", "tips": ["Add a child subquery in SELECT: (SELECT Id FROM <ChildRelationshipName> ...).", "Include ORDER BY and LIMIT in child subqueries."], "next": "sortLimit" },
          { "label": "No", "next": "sortLimit" }
        ]
      },
      "sortLimit": {
        "text": "Sort and limit?",
        "options": [
          { "label": "Yes", "tips": ["Add ORDER BY (e.g., CreatedDate DESC) and LIMIT 200."], "next": "scopes" },
          { "label": "Skip", "next": "scopes" }
        ]
      },
      "scopes": {
        "text": "Any special scope or records?",
        "options": [
          { "label": "Mine/Sharing scope", "tips": ["Consider USING SCOPE Mine."] },
          { "label": "Include deleted/archived", "tips": ["Add ALL ROWS."] },
          { "label": "Apex context", "tips": ["Consider WITH SECURITY_ENFORCED to honor FLS and sharing in Apex."] },
          { "label": "Lock rows", "tips": ["Add FOR UPDATE."] }
        ]
      }
    }
  },
  "snippets": {
    "simple": "SELECT Id, Name FROM Account WHERE Name LIKE 'Acme%' ORDER BY Name LIMIT 200",
    "aggregate": "SELECT AccountId, COUNT(Id) cnt FROM Contact WHERE CreatedDate >= LAST_N_DAYS:30 GROUP BY AccountId HAVING COUNT(Id) > 2 ORDER BY cnt DESC LIMIT 100",
    "child": "SELECT Id, (SELECT Id, Subject FROM Tasks ORDER BY CreatedDate DESC LIMIT 5) FROM Account WHERE Industry = 'Technology'",
    "semiJoin": "SELECT Id, Name FROM Account WHERE Id IN (SELECT AccountId FROM Contact WHERE Email LIKE '%@domain.com') ORDER BY Name LIMIT 200",
    "antiJoin": "SELECT Id, Name FROM Account WHERE Id NOT IN (SELECT AccountId FROM Contact) LIMIT 200",
    "typeofPolymorphic": "SELECT Id, TYPEOF What WHEN Account THEN Phone, Website WHEN Opportunity THEN Amount END FROM Task WHERE WhatId != NULL",
    "polymorphicTypeof": "SELECT Id, Subject, TYPEOF What WHEN Account THEN What.Name, What.Industry WHEN Opportunity THEN What.Name, What.Amount ELSE Name END FROM Task WHERE WhatId != NULL LIMIT 100",
    "forUpdate": "SELECT Id, Status FROM Case WHERE Status = 'New' ORDER BY CreatedDate ASC LIMIT 50 FOR UPDATE",
    "securityEnforced": "SELECT Id, Name FROM Account WITH SECURITY_ENFORCED WHERE CreatedDate = LAST_N_DAYS:30 ORDER BY CreatedDate DESC LIMIT 200"
  }
}
