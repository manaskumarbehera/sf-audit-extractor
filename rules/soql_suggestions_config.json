{
  "meta": { "name": "soql-editor-suggestions-policy", "version": "1.3.1", "updatedAt": "2025-10-24" },
  "declarativeOnly": true,
  "lifecycle": {
    "states": ["IDLE","SELECTING_FIELDS","CHOOSING_OBJECT","FILTERING","GROUPING","HAVING_AGG","ORDERING","LIMITING","OFFSETTING","SUBQUERY","ERROR_RECOVERY"],
    "order": ["SELECTING_FIELDS","CHOOSING_OBJECT","FILTERING","GROUPING","HAVING_AGG","ORDERING","LIMITING","OFFSETTING"]
  },
  "clauseOrder": {
    "topLevel": ["SELECT","FROM","WHERE","GROUP BY","HAVING","ORDER BY","LIMIT","OFFSET","FOR UPDATE"],
    "subquery": ["SELECT","FROM(childRelationship)","WHERE","LIMIT"]
  },
  "sessionContextDefaults": {
    "isActive": true,
    "phase": "IDLE",
    "cursorContext": "top-level",
    "object": null,
    "fieldListMode": "none",
    "hasLimit": false,
    "hasOffset": false,
    "errors": [],
    "emittedSuggestions": [],
    "lastEmittedAt": {}
  },
  "conflictResolution": {
    "groupStrategy": "highest-priority-wins",
    "deDupeBy": ["message","id"],
    "applyFireOncePer": true,
    "respectCooldown": true
  },
  "suggestions": [
    {
      "id": "starter_suggestions",
      "type": "starter",
      "enabled": true,
      "priority": 100,
      "phaseAllow": ["IDLE","SELECTING_FIELDS"],
      "mutexGroup": "starter",
      "guard": "Offer only SELECT when the editor is empty",
      "fireOncePer": "query",
      "cooldownMs": 0,
      "visibility": "inline-hint",
      "severity": "info",
      "matchOn": "query",
      "matchRegex": "^\\s*$",
      "apply": { "type": "replace", "text": "SELECT ", "label": "Start a SELECT" },
      "message": "Begin a SOQL SELECT"
    },

    {
      "id": "sequencer-next-clause",
      "type": "clause_sequencer",
      "enabled": true,
      "priority": 99,
      "phaseAllow": ["IDLE","SELECTING_FIELDS","CHOOSING_OBJECT","FILTERING","GROUPING","HAVING_AGG","ORDERING","LIMITING","OFFSETTING"],
      "mutexGroup": "sequencer",
      "guard": "Suggest only the next valid clause in canonical order.",
      "fireOncePer": "phase",
      "cooldownMs": 0,
      "visibility": "inline-hint",
      "severity": "tip",
      "message": "Next valid clause: respects SELECT → FROM → WHERE → GROUP BY → HAVING → ORDER BY → LIMIT → OFFSET → FOR UPDATE."
    },
    {
      "id": "having-after-groupby",
      "type": "next_keyword",
      "enabled": true,
      "priority": 96,
      "phaseAllow": ["GROUPING","HAVING_AGG","FILTERING","ORDERING"],
      "mutexGroup": "sequencer",
      "guard": "Only show HAVING if GROUP BY exists.",
      "fireOncePer": "phase",
      "cooldownMs": 0,
      "visibility": "inline-hint",
      "severity": "warn",
      "matchOn": "query",
      "matchRegex": "\\bGROUP\\s+BY\\b",
      "notMatchRegex": "(\\(\\s*select\\b|\\bFROM\\b)",
      "message": "Add `HAVING` to filter grouped results (only after `GROUP BY`)."
    },
    {
      "id": "suppress-having-without-groupby",
      "type": "suppress_keyword",
      "enabled": true,
      "priority": 100,
      "phaseAllow": ["FILTERING","ORDERING"],
      "mutexGroup": "sequencer",
      "guard": "Hide HAVING unless GROUP BY is present.",
      "fireOncePer": "phase",
      "cooldownMs": 0,
      "visibility": "hidden",
      "severity": "block",
      "matchOn": "query",
      "matchRegex": "^(?![\\s\\S]*\\bGROUP\\s+BY\\b)[\\s\\S]*$",
      "message": "HAVING requires GROUP BY."
    },
    {
      "id": "suppress-offset-without-limit",
      "type": "suppress_keyword",
      "enabled": true,
      "priority": 100,
      "phaseAllow": ["ORDERING","LIMITING","OFFSETTING","FILTERING"],
      "mutexGroup": "sequencer",
      "guard": "Hide OFFSET until LIMIT exists.",
      "fireOncePer": "phase",
      "cooldownMs": 0,
      "visibility": "hidden",
      "severity": "block",
      "matchOn": "query",
      "matchRegex": "^(?![\\s\\S]*\\bLIMIT\\s+\\d+\\b)[\\s\\S]*$",
      "message": "OFFSET requires LIMIT."
    },

    {
      "id": "order-by-placement",
      "type": "next_keyword",
      "enabled": true,
      "priority": 75,
      "phaseAllow": ["FILTERING","GROUPING","HAVING_AGG"],
      "mutexGroup": "sequencer",
      "guard": "ORDER BY appears only after WHERE/GROUP BY/HAVING and before LIMIT.",
      "fireOncePer": "phase",
      "cooldownMs": 0,
      "visibility": "inline-hint",
      "severity": "tip",
      "message": "Place `ORDER BY` before `LIMIT` and after filters/grouping."
    },
    {
      "id": "with-security-position",
      "type": "option_hint",
      "enabled": true,
      "priority": 74,
      "phaseAllow": ["FILTERING","GROUPING","HAVING_AGG","ORDERING"],
      "mutexGroup": "query-options",
      "guard": "WITH SECURITY_ENFORCED should sit after WHERE/GROUP/HAVING and before ORDER BY/LIMIT.",
      "fireOncePer": "query",
      "cooldownMs": 20000,
      "visibility": "inline-hint",
      "severity": "tip",
      "message": "Place `WITH SECURITY_ENFORCED` before `ORDER BY`/`LIMIT`."
    },
    {
      "id": "for-update-last",
      "type": "option_hint",
      "enabled": true,
      "priority": 73,
      "phaseAllow": ["LIMITING","OFFSETTING","ORDERING","HAVING_AGG","GROUPING","FILTERING"],
      "mutexGroup": "query-options",
      "guard": "FOR UPDATE must be the last clause.",
      "fireOncePer": "query",
      "cooldownMs": 20000,
      "visibility": "inline-hint",
      "severity": "tip",
      "message": "Append `FOR UPDATE` at the very end to lock rows."
    },

    {
      "id": "select-star",
      "type": "replace_select_star",
      "enabled": true,
      "priority": 100,
      "phaseAllow": ["SELECTING_FIELDS"],
      "mutexGroup": "field-list-shape",
      "guard": "User typed * after SELECT at top level.",
      "fireOncePer": "phase",
      "cooldownMs": 0,
      "visibility": "quick-fix",
      "severity": "warn",
      "replacement": "Id, Name",
      "matchOn": "query",
      "matchRegex": "\\bSELECT\\b[\\s\\S]*\\*[^\\S\\n]*\\bFROM\\b",
      "message": "Replace '*' with explicit fields to avoid invalid SOQL"
    },

    {
      "id": "fields-macro-helpers",
      "type": "fields_helpers",
      "enabled": true,
      "priority": 100,
      "phaseAllow": ["SELECTING_FIELDS"],
      "mutexGroup": "field-list-shape",
      "guard": "Offer FIELDS(...) only right after typing SELECT ",
      "fireOncePer": "phase",
      "cooldownMs": 0,
      "visibility": "inline-hint",
      "severity": "info",
      "matchOn": "selectSegment",
      "matchRegex": "^\\s*$",
      "notMatchRegex": "\\bFIELDS\\s*\\("
    },
    {
      "id": "suppress-fields-when-macro-present",
      "type": "suppress_keyword",
      "enabled": true,
      "priority": 101,
      "phaseAllow": ["SELECTING_FIELDS"],
      "mutexGroup": "field-list-shape",
      "guard": "Hide FIELDS(...) helpers once a FIELDS macro exists",
      "fireOncePer": "phase",
      "cooldownMs": 0,
      "visibility": "hidden",
      "severity": "block",
      "matchOn": "query",
      "matchRegex": "\\bFIELDS\\s*\\(",
      "message": "FIELDS macro already present."
    },
    {
      "id": "from-after-fields-macro",
      "type": "next_keyword",
      "enabled": true,
      "priority": 95,
      "phaseAllow": ["SELECTING_FIELDS"],
      "mutexGroup": "next-keyword",
      "guard": "Add FROM after FIELDS(...)",
      "fireOncePer": "query",
      "cooldownMs": 0,
      "visibility": "inline-hint",
      "severity": "tip",
      "matchOn": "query",
      "matchRegex": "\\bSELECT\\b[\\s\\S]*\\bFIELDS\\s*\\(\\s*(ALL|STANDARD|CUSTOM)\\s*\\)\\s*$",
      "notMatchRegex": "\\bFROM\\b",
      "message": "Add `FROM` to choose the base object."
    },

    {
      "id": "suggest-where-after-from",
      "type": "next_keyword",
      "enabled": true,
      "priority": 60,
      "phaseAllow": ["CHOOSING_OBJECT"],
      "mutexGroup": "next-keyword",
      "guard": "Valid base object chosen; no WHERE/GROUP/ORDER/LIMIT/OFFSET yet.",
      "fireOncePer": "phase",
      "cooldownMs": 0,
      "visibility": "inline-hint",
      "severity": "tip",
      "matchOn": "query",
      "matchRegex": "\\bFROM\\b",
      "notMatchRegex": "\\bWHERE\\b|\\bGROUP\\s+BY\\b|\\bORDER\\s+BY\\b|\\bLIMIT\\b|\\bOFFSET\\b",
      "message": "Add `WHERE` to filter results, or `ORDER BY` / `LIMIT`."
    },
    {
      "id": "like-wildcard",
      "type": "where_hint",
      "enabled": true,
      "priority": 55,
      "phaseAllow": ["FILTERING"],
      "mutexGroup": "filter-hints",
      "guard": "Operator LIKE is present or being typed.",
      "fireOncePer": "phase",
      "cooldownMs": 12000,
      "visibility": "inline-hint",
      "severity": "tip",
      "message": "Use `%` wildcards with LIKE (e.g., `Name LIKE 'Acme%'`)."
    },
    {
      "id": "in-list-commas",
      "type": "where_hint",
      "enabled": true,
      "priority": 55,
      "phaseAllow": ["FILTERING"],
      "mutexGroup": "list-separators",
      "guard": "Inside IN ( ... ) list with adjacent values lacking commas or with trailing comma.",
      "fireOncePer": "phase",
      "cooldownMs": 10000,
      "visibility": "inline-hint",
      "severity": "tip",
      "message": "Separate values with commas; no trailing comma before `)`."
    },
    {
      "id": "order-multi-fields",
      "type": "order_hint",
      "enabled": true,
      "priority": 50,
      "phaseAllow": ["ORDERING"],
      "mutexGroup": "list-separators",
      "guard": "Multiple ORDER BY fields without proper comma+space separation.",
      "fireOncePer": "phase",
      "cooldownMs": 8000,
      "visibility": "inline-hint",
      "severity": "tip",
      "message": "Use `, ` between sort fields (e.g., `ORDER BY Name, CreatedDate DESC`)."
    },
    {
      "id": "nulls-ordering",
      "type": "order_hint",
      "enabled": true,
      "priority": 45,
      "phaseAllow": ["ORDERING"],
      "mutexGroup": "order-options",
      "guard": "ORDER BY present; suggest NULLS FIRST/LAST after ASC/DESC.",
      "fireOncePer": "phase",
      "cooldownMs": 12000,
      "visibility": "inline-hint",
      "severity": "tip",
      "message": "Optionally add `NULLS FIRST` or `NULLS LAST`."
    },
    {
      "id": "aggregate-needs-groupby",
      "type": "aggregate_hint",
      "enabled": true,
      "priority": 95,
      "phaseAllow": ["SELECTING_FIELDS"],
      "mutexGroup": "aggregate-shape",
      "guard": "Aggregate function present with non-aggregated fields and no GROUP BY.",
      "fireOncePer": "query",
      "cooldownMs": 0,
      "visibility": "quick-fix",
      "severity": "warn",
      "message": "Add `GROUP BY` for non-aggregated fields when using aggregates."
    },
    {
      "id": "fields-macro-exclusivity",
      "type": "fields_macro_hint",
      "enabled": true,
      "priority": 92,
      "phaseAllow": ["SELECTING_FIELDS"],
      "mutexGroup": "field-list-shape",
      "guard": "FIELDS(ALL|STANDARD|CUSTOM) used alongside explicit fields.",
      "fireOncePer": "phase",
      "cooldownMs": 0,
      "visibility": "quick-fix",
      "severity": "warn",
      "message": "Do not mix FIELDS() macros with explicit fields."
    },
    {
      "id": "subquery-shape",
      "type": "subquery_hint",
      "enabled": true,
      "priority": 70,
      "phaseAllow": ["SUBQUERY"],
      "mutexGroup": "subquery-shape",
      "guard": "Inside `(SELECT … FROM ChildRel …)`; ensure comma-separated child fields and a space before FROM.",
      "fireOncePer": "phase",
      "cooldownMs": 12000,
      "visibility": "inline-hint",
      "severity": "tip",
      "message": "Use `SELECT Id, Name FROM ChildRel` with commas and single spaces."
    },
    {
      "id": "offset-after-limit",
      "type": "add_offset",
      "enabled": true,
      "priority": 50,
      "phaseAllow": ["LIMITING","OFFSETTING"],
      "mutexGroup": "limit",
      "guard": "OFFSET present without prior LIMIT, or user likely paging results.",
      "fireOncePer": "query",
      "cooldownMs": 0,
      "visibility": "inline-hint",
      "severity": "tip",
      "message": "Use `OFFSET` only after `LIMIT`."
    },

    {
      "id": "quote-text-values",
      "type": "where_hint",
      "enabled": true,
      "priority": 95,
      "phaseAllow": ["FILTERING"],
      "mutexGroup": "typing-datatypes",
      "guard": "String/text field compared without single quotes.",
      "fireOncePer": "phase",
      "cooldownMs": 8000,
      "visibility": "inline-hint",
      "severity": "warn",
      "message": "Wrap text values in single quotes (e.g., Name = 'Acme')."
    },
    {
      "id": "unquote-numbers",
      "type": "where_hint",
      "enabled": true,
      "priority": 92,
      "phaseAllow": ["FILTERING"],
      "mutexGroup": "typing-datatypes",
      "guard": "Numeric field compared to a quoted value.",
      "fireOncePer": "phase",
      "cooldownMs": 8000,
      "visibility": "inline-hint",
      "severity": "tip",
      "message": "Remove quotes around numbers (e.g., AnnualRevenue > 1000000)."
    },
    {
      "id": "boolean-literals",
      "type": "where_hint",
      "enabled": true,
      "priority": 92,
      "phaseAllow": ["FILTERING"],
      "mutexGroup": "typing-datatypes",
      "guard": "Boolean comparison uses quoted value.",
      "fireOncePer": "phase",
      "cooldownMs": 8000,
      "visibility": "inline-hint",
      "severity": "tip",
      "message": "Use TRUE/FALSE without quotes (e.g., IsDeleted = FALSE)."
    },
    {
      "id": "null-comparison",
      "type": "where_hint",
      "enabled": true,
      "priority": 91,
      "phaseAllow": ["FILTERING"],
      "mutexGroup": "typing-datatypes",
      "guard": "Comparison to NULL is quoted or uses invalid operator.",
      "fireOncePer": "phase",
      "cooldownMs": 10000,
      "visibility": "inline-hint",
      "severity": "tip",
      "message": "Use = NULL or != NULL (no quotes) for null checks."
    },
    {
      "id": "date-literal-suggestion",
      "type": "where_hint",
      "enabled": true,
      "priority": 88,
      "phaseAllow": ["FILTERING"],
      "mutexGroup": "dates",
      "guard": "Date/Datetime field compared to a free-form string.",
      "fireOncePer": "phase",
      "cooldownMs": 12000,
      "visibility": "inline-hint",
      "severity": "tip",
      "message": "Prefer date literals (e.g., CreatedDate >= LAST_N_DAYS:30)."
    },
    {
      "id": "datetime-iso8601",
      "type": "where_hint",
      "enabled": true,
      "priority": 70,
      "phaseAllow": ["FILTERING"],
      "mutexGroup": "dates",
      "guard": "Explicit datetime detected without timezone.",
      "fireOncePer": "phase",
      "cooldownMs": 15000,
      "visibility": "inline-hint",
      "severity": "tip",
      "message": "Use full ISO datetime with Z (e.g., 2024-01-01T00:00:00Z)."
    },
    {
      "id": "picklist-values",
      "type": "where_hint",
      "enabled": true,
      "priority": 86,
      "phaseAllow": ["FILTERING"],
      "mutexGroup": "picklist",
      "guard": "Picklist operator used; suggest valid values for field.",
      "fireOncePer": "phase",
      "cooldownMs": 12000,
      "visibility": "inline-hint",
      "severity": "tip",
      "message": "Choose from valid picklist values for this field."
    },
    {
      "id": "multi-select-includes",
      "type": "where_hint",
      "enabled": true,
      "priority": 86,
      "phaseAllow": ["FILTERING"],
      "mutexGroup": "picklist",
      "guard": "Multi-select picklist compared using IN/= or LIKE.",
      "fireOncePer": "phase",
      "cooldownMs": 12000,
      "visibility": "inline-hint",
      "severity": "warn",
      "message": "Use INCLUDES/EXCLUDES for multi-select picklists."
    },
    {
      "id": "id-quoting",
      "type": "where_hint",
      "enabled": true,
      "priority": 89,
      "phaseAllow": ["FILTERING"],
      "mutexGroup": "typing-datatypes",
      "guard": "Id field or Id list contains unquoted values.",
      "fireOncePer": "phase",
      "cooldownMs": 10000,
      "visibility": "inline-hint",
      "severity": "warn",
      "message": "Quote Salesforce Ids in lists (e.g., Id IN ('001…','001…'))."
    },
    {
      "id": "like-not-wildcard",
      "type": "where_hint",
      "enabled": true,
      "priority": 84,
      "phaseAllow": ["FILTERING"],
      "mutexGroup": "like",
      "guard": "LIKE used without % wildcard or with mismatched quotes.",
      "fireOncePer": "phase",
      "cooldownMs": 12000,
      "visibility": "inline-hint",
      "severity": "tip",
      "message": "Add % wildcards (e.g., Name LIKE 'Acme%')."
    },
    {
      "id": "not-like-supported",
      "type": "where_hint",
      "enabled": true,
      "priority": 60,
      "phaseAllow": ["FILTERING"],
      "mutexGroup": "like",
      "guard": "User types NOT LIKE pattern.",
      "fireOncePer": "phase",
      "cooldownMs": 12000,
      "visibility": "inline-hint",
      "severity": "tip",
      "message": "Use `NOT LIKE` to exclude patterns (e.g., Name NOT LIKE 'A%')."
    },
    {
      "id": "in-list-spacing",
      "type": "where_hint",
      "enabled": true,
      "priority": 83,
      "phaseAllow": ["FILTERING"],
      "mutexGroup": "list-separators",
      "guard": "IN (…) list lacks `, ` spacing.",
      "fireOncePer": "phase",
      "cooldownMs": 9000,
      "visibility": "inline-hint",
      "severity": "tip",
      "message": "Separate values with `, ` and no trailing comma before `)`."
    },
    {
      "id": "and-or-spacing",
      "type": "where_hint",
      "enabled": true,
      "priority": 72,
      "phaseAllow": ["FILTERING"],
      "mutexGroup": "whitespace",
      "guard": "Logical operators adjacent to tokens without spaces.",
      "fireOncePer": "phase",
      "cooldownMs": 9000,
      "visibility": "inline-hint",
      "severity": "tip",
      "message": "Use spaces around AND/OR (e.g., A = 1 AND B = 2)."
    },
    {
      "id": "parent-dot-depth",
      "type": "dot_hint",
      "enabled": true,
      "priority": 65,
      "phaseAllow": ["SELECTING_FIELDS"],
      "mutexGroup": "relationship-access",
      "guard": "Relationship chain exceeds recommended depth.",
      "fireOncePer": "phase",
      "cooldownMs": 15000,
      "visibility": "inline-hint",
      "severity": "tip",
      "message": "Keep relationship depth shallow for performance (e.g., a.b.c.Name)."
    },
    {
      "id": "childrel-vs-object",
      "type": "subquery_hint",
      "enabled": true,
      "priority": 82,
      "phaseAllow": ["SUBQUERY"],
      "mutexGroup": "subquery-shape",
      "guard": "Object API name used instead of child relationship in subquery FROM.",
      "fireOncePer": "phase",
      "cooldownMs": 12000,
      "visibility": "inline-hint",
      "severity": "warn",
      "message": "Use the child relationship name, not the object API name, in subqueries."
    },
    {
      "id": "semi-join-type-match",
      "type": "where_hint",
      "enabled": true,
      "priority": 78,
      "phaseAllow": ["FILTERING"],
      "mutexGroup": "joins",
      "guard": "IN/NOT IN subquery returns a field whose type doesn’t match the outer field.",
      "fireOncePer": "phase",
      "cooldownMs": 15000,
      "visibility": "inline-hint",
      "severity": "warn",
      "message": "Ensure subquery returns a compatible type (e.g., Id IN (SELECT AccountId …))."
    },
    {
      "id": "fields-macro-vs-aggregate",
      "type": "fields_macro_hint",
      "enabled": true,
      "priority": 93,
      "phaseAllow": ["SELECTING_FIELDS"],
      "mutexGroup": "field-list-shape",
      "guard": "FIELDS(…) used together with aggregates in SELECT.",
      "fireOncePer": "phase",
      "cooldownMs": 0,
      "visibility": "quick-fix",
      "severity": "warn",
      "message": "Don’t combine FIELDS() with aggregates; choose one approach."
    },
    {
      "id": "limit-upper-cap",
      "type": "add_limit",
      "enabled": true,
      "priority": 88,
      "phaseAllow": ["ORDERING","FILTERING","CHOOSING_OBJECT","SELECTING_FIELDS"],
      "mutexGroup": "limit",
      "guard": "LIMIT missing or set above recommended cap.",
      "fireOncePer": "query",
      "cooldownMs": 60000,
      "visibility": "inline-hint",
      "severity": "tip",
      "defaultLimit": 200,
      "message": "Cap LIMIT to a reasonable value (e.g., 200) to keep queries fast.",
      "example": "LIMIT 200"
    },
    {
      "id": "with-security-enforced",
      "type": "option_hint",
      "enabled": true,
      "priority": 55,
      "phaseAllow": ["CHOOSING_OBJECT","FILTERING","ORDERING","GROUPING","HAVING_AGG"],
      "mutexGroup": "query-options",
      "guard": "Top-level query on standard or sensitive objects.",
      "fireOncePer": "query",
      "cooldownMs": 60000,
      "visibility": "inline-hint",
      "severity": "tip",
      "message": "Consider `WITH SECURITY_ENFORCED` to respect FLS and object perms."
    },
    {
      "id": "for-update-lock",
      "type": "option_hint",
      "enabled": true,
      "priority": 40,
      "phaseAllow": ["CHOOSING_OBJECT","FILTERING","ORDERING","LIMITING","OFFSETTING"],
      "mutexGroup": "query-options",
      "guard": "Pattern suggests read-for-update in admin/dev contexts.",
      "fireOncePer": "query",
      "cooldownMs": 60000,
      "visibility": "inline-hint",
      "severity": "tip",
      "message": "Need to lock selected rows? Append `FOR UPDATE` at the end."
    },
    {
      "id": "space-after-comma",
      "type": "spacing_hint",
      "enabled": true,
      "priority": 76,
      "phaseAllow": ["SELECTING_FIELDS","SUBQUERY","ORDERING","GROUPING"],
      "mutexGroup": "list-separators",
      "guard": "Comma not followed by a single space in lists.",
      "fireOncePer": "phase",
      "cooldownMs": 9000,
      "visibility": "inline-hint",
      "severity": "tip",
      "message": "Insert a single space after commas (e.g., Id, Name, OwnerId)."
    },
    {
      "id": "no-space-before-dot-strong",
      "type": "spacing_hint",
      "enabled": true,
      "priority": 76,
      "phaseAllow": ["SELECTING_FIELDS"],
      "mutexGroup": "relationship-access",
      "guard": "Space detected before dot in relationship path.",
      "fireOncePer": "phase",
      "cooldownMs": 9000,
      "visibility": "inline-hint",
      "severity": "warn",
      "message": "Remove the space before the dot (e.g., Account.Name)."
    },
    {
      "id": "keyword-single-space",
      "type": "spacing_hint",
      "enabled": true,
      "priority": 80,
      "phaseAllow": ["SELECTING_FIELDS","CHOOSING_OBJECT","FILTERING","ORDERING","GROUPING","HAVING_AGG","LIMITING","OFFSETTING"],
      "mutexGroup": "whitespace",
      "guard": "Multiple spaces between keywords and tokens.",
      "fireOncePer": "phase",
      "cooldownMs": 7000,
      "visibility": "inline-hint",
      "severity": "tip",
      "message": "Use exactly one space between keywords and tokens."
    },
    {
      "id": "close-parens-and-quotes",
      "type": "syntax_hint",
      "enabled": true,
      "priority": 98,
      "phaseAllow": ["ERROR_RECOVERY","SELECTING_FIELDS","FILTERING","SUBQUERY"],
      "mutexGroup": "syntax",
      "guard": "Unbalanced parentheses or quotes detected.",
      "fireOncePer": "phase",
      "cooldownMs": 4000,
      "visibility": "inline-hint",
      "severity": "block",
      "message": "Close all open `(` and `'` before continuing."
    },

    {
      "id": "order-by-after-where",
      "type": "next_keyword",
      "enabled": true,
      "priority": 58,
      "phaseAllow": ["FILTERING"],
      "mutexGroup": "next-keyword",
      "guard": "WHERE present, no ORDER BY/LIMIT/OFFSET yet.",
      "fireOncePer": "phase",
      "cooldownMs": 0,
      "visibility": "inline-hint",
      "severity": "tip",
      "message": "Add `ORDER BY` to control sorting, then `LIMIT`."
    },

    {
      "id": "subquery-where-after-from",
      "type": "subquery_hint",
      "enabled": true,
      "priority": 71,
      "phaseAllow": ["SUBQUERY"],
      "mutexGroup": "subquery-shape",
      "guard": "Inside subquery: ensure SELECT → FROM(childRel) → WHERE → LIMIT order.",
      "fireOncePer": "phase",
      "cooldownMs": 0,
      "visibility": "inline-hint",
      "severity": "tip",
      "message": "In subqueries, use `SELECT fields FROM ChildRel [WHERE …] [LIMIT N]` (no ORDER BY/GROUP BY)."
    },

    {
      "id": "order-by-field-suggestions",
      "type": "order_hint",
      "enabled": true,
      "priority": 78,
      "matchOn": "query",
      "matchRegex": "\\border\\s+by\\b",
      "notMatchRegex": "\\(\\s*select\\b",
      "phaseAllow": ["ORDERING"],
      "mutexGroup": "order-list",
      "guard": "Cursor is inside ORDER BY list at top level (not in subquery).",
      "fireOncePer": "phase",
      "cooldownMs": 0,
      "visibility": "inline-hint",
      "severity": "tip",
      "message": "Choose a sortable field (base or one-level parent). After field, optionally add ASC/DESC and NULLS FIRST/LAST.",
      "rules": {
        "allowOutsideSelect": true,
        "allowParentDepth": 1,
        "allowAggregatesWhenGrouped": true,
        "allowMultipleOrderItems": true,
        "directionOptional": true,
        "nullsPlacementOptional": true,
        "disallowInSubquery": true,
        "noTrailingComma": true
      }
    },
    {
      "id": "order-by-followups",
      "type": "order_hint",
      "enabled": true,
      "priority": 77,
      "matchOn": "query",
      "matchRegex": "\\border\\s+by\\b",
      "notMatchRegex": "\\(\\s*select\\b",
      "phaseAllow": ["ORDERING"],
      "mutexGroup": "order-followups",
      "guard": "After an ORDER BY field or expression.",
      "fireOncePer": "phase",
      "cooldownMs": 0,
      "visibility": "inline-hint",
      "severity": "tip",
      "message": "Optionally add ASC or DESC, then NULLS FIRST/LAST, or start another field with ', '.",
      "followups": ["ASC", "DESC", "NULLS FIRST", "NULLS LAST", ", "]
    },

    {
      "id": "limit-suggestion",
      "type": "add_limit",
      "enabled": true,
      "priority": 92,
      "phaseAllow": ["SELECTING_FIELDS","IDLE"],
      "mutexGroup": "limit",
      "guard": "Top-level query has no LIMIT; not inside SUBQUERY; no blocking syntax errors.",
      "fireOncePer": "query",
      "cooldownMs": 60000,
      "visibility": "inline-hint",
      "severity": "tip",
      "defaultLimit": 200,
      "matchOn": "query",
      "matchRegex": "\\bFIELDS\\b\\s*\\(\\s*(ALL|STANDARD|CUSTOM)\\s*\\)",
      "notMatchRegex": "(\\bLIMIT\\b\\s*\\d+|\\(\\s*select\\b)",
      "message": "Add a LIMIT to avoid large result sets",
      "example": "LIMIT 200"
    },

    {
      "id": "suggest-from-after-select",
      "type": "next_keyword",
      "enabled": true,
      "priority": 70,
      "phaseAllow": ["SELECTING_FIELDS"],
      "mutexGroup": "next-keyword",
      "guard": "Only suggest FROM once the SELECT list is formed (FIELDS or explicit fields).",
      "fireOncePer": "query",
      "cooldownMs": 0,
      "visibility": "inline-hint",
      "severity": "tip",
      "matchOn": "query",
      "matchRegex": "\\bSELECT\\b[\\s\\S]+\\S\\s*$",
      "notMatchRegex": "\\bFROM\\b",
      "message": "Add `FROM` to choose the base object."
    }
  ]
}
